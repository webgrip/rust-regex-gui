{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Regex GUI","text":"<p>Regex GUI is a small desktop and web application for renaming files using regular expressions. It is written in Rust and built on top of <code>eframe</code>/<code>egui</code>.</p> <p>This documentation is served via MkDocs and Backstage TechDocs. Use the navigation on the left to explore the different sections.</p>"},{"location":"architecture/","title":"Architecture","text":"<pre>Error : Image not created</pre> <pre>Args : ['mmdc', '-p', '/tmp/tmpx4_i9brw/puppeteer-config.json', '-o', '/tmp/tmpx4_i9brw/out.svg']</pre> <pre>stdout : Generating single mermaid chart\n</pre> <pre>stderr : \nNo input file specified, reading from stdin. If you want to specify an input file, please use `-i .` You can use `-i -` to read from stdin and to suppress this warning.\n\n[@zenuml/core] Store is a function and is not initiated in 1 second.\n\nUnknownDiagramError: No diagram type detected matching given configuration for text: \n\n    at $eval ($eval at renderMermaid (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/src/index.js:252:33), :17:45)\n    at #evaluate (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/node_modules/puppeteer-core/lib/esm/puppeteer/cdp/ExecutionContext.js:388:19)\n    at async ExecutionContext.evaluate (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/node_modules/puppeteer-core/lib/esm/puppeteer/cdp/ExecutionContext.js:275:16)\n    at async IsolatedWorld.evaluate (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/node_modules/puppeteer-core/lib/esm/puppeteer/cdp/IsolatedWorld.js:97:16)\n    at async CdpJSHandle.evaluate (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/node_modules/puppeteer-core/lib/esm/puppeteer/api/JSHandle.js:146:20)\n    at async CdpElementHandle.evaluate (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.js:340:20)\n    at async CdpElementHandle.$eval (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/node_modules/puppeteer-core/lib/esm/puppeteer/api/ElementHandle.js:494:24)\n    at async CdpFrame.$eval (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/node_modules/puppeteer-core/lib/esm/puppeteer/api/Frame.js:450:20)\n    at async CdpPage.$eval (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/node_modules/puppeteer-core/lib/esm/puppeteer/api/Page.js:450:20)\n    at async renderMermaid (file:///usr/local/lib/node_modules/@mermaid-js/mermaid-cli/src/index.js:252:22)\n\n\n<pre>graph code : %%{init: {'theme':'base'}}%%\n%% include the external mermaid file\n</pre>"},{"location":"development/","title":"Development","text":"<p>This project uses a simple Makefile to streamline common tasks. Useful targets include:</p> <ul> <li><code>make run</code> \u2013 run the application.</li> <li><code>make fmt</code> \u2013 format the code base using <code>cargo fmt</code>.</li> <li><code>make clippy</code> \u2013 run <code>cargo clippy</code> with warnings as errors.</li> <li><code>make test</code> \u2013 execute unit tests.</li> <li><code>make docs</code> \u2013 serve the documentation locally via MkDocs.</li> </ul> <p>The source code adheres to conventional commits and is organized with hexagonal architecture principles.</p>"},{"location":"usage/","title":"Usage","text":"<p>The application displays renaming rules in a small data table. Each row lets you enter a regular expression and the destination path. Dedicated buttons allow you to add or remove rows and the input fields have ample width for comfortable typing.</p>"},{"location":"usage/#running-locally","title":"Running locally","text":"<pre><code>cargo run\n</code></pre>"},{"location":"usage/#docker","title":"Docker","text":"<p>Build and run the application using Docker:</p> <pre><code>docker compose up --build\n</code></pre> <p>An X11 server must be available on the host as the container forwards the UI.</p>"},{"location":"usage/#web","title":"Web","text":"<p>To build and run in a browser:</p> <pre><code>rustup target add wasm32-unknown-unknown\ntrunk serve\n</code></pre> <p>Or use Docker:</p> <pre><code>docker compose up web --build\n</code></pre> <p>Then open http://localhost:8080 in your browser.</p>"}]}